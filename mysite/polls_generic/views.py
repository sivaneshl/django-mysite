from django.shortcuts import render, get_object_or_404
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.views import generic
from polls.models import Question, Choice   # sharing the same model and data from polls

# We’re using two generic views here: ListView and DetailView. Respectively, those two views abstract the concepts of
# “display a list of objects” and “display a detail page for a particular type of object.”
# Each generic view needs to know what model it will be acting upon. This is provided using the model attribute.
# The DetailView generic view expects the primary key value captured from the URL to be called "pk", so we’ve changed
# question_id to pk for the generic views (urls.py).


# The ListView generic view uses a default template called <app name>/<model name>_list.html; we use template_name to
# tell ListView to use our existing "polls/index.html" template.
class IndexView(generic.ListView):
    template_name = 'polls_generic/index.html'
    context_object_name = 'latest_question_list'

    def get_queryset(self):
        """ Returns the last 5 published questions """
        return Question.objects.order_by('-pub_date')[:5]


# By default, the DetailView generic view uses a template called <app name>/<model name>_detail.html. In our case, it
# would use the template "polls/question_detail.html". The template_name attribute is used to tell Django to use a
# specific template name instead of the autogenerated default template name. We also specify the template_name for the
# results list view – this ensures that the results view and the detail view have a different appearance when rendered,
# even though they’re both a DetailView behind the scenes.
class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls_generic/detail.html'


class ResultView(generic.DetailView):
    model = Question
    template_name = 'polls_generic/results.html'

# In polls app, the templates have been provided with a context that contains the question and latest_question_list
# context variables. For DetailView the question variable is provided automatically – since we’re using a Django model -
# Question, Django is able to determine an appropriate name for the context variable. However, for ListView, the
# automatically generated context variable is question_list. To override this we provide the context_object_name
# attribute, specifying that we want to use latest_question_list instead.
# As an alternative approach, you could change your templates to match the new default context variables – it’s a lot
# easier to tell Django to use the variable you want.


def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        # request.POST is a dictionary-like object that lets you access submitted data by key name.
        # In this case, request.POST['choice'] returns the ID of the selected choice, as a string.
        # request.POST values are always strings.
        # print(sys.stderr, 'choice' not in request.POST)
        selected_choice = question.choice_set.get(pk=request.POST['choice'])

    except (KeyError, Choice.DoesNotExist):
        # request.POST['choice'] will raise KeyError if choice wasn’t provided in POST data. The code checks for
        # KeyError and re-displays the question form with an error message if choice isn’t given.
        return render(request, 'polls_generic/detail.html',
                      {'question': question, 'error_message': "You didn't select a choice"})

    else:
        selected_choice.votes += 1
        selected_choice.save()

    # Always return HttpResponseRedirect after successfully dealing with POST data. This prevents data from being
    # posted twice if a user hits back button again.
    return HttpResponseRedirect(reverse('polls_generic:results', args=(question_id, )))
    # HttpResponseRedirect takes a single argument: the URL to which the user will be redirected.
    # We are using the reverse() function in the HttpResponseRedirect constructor. This function helps avoid having to
    # hardcode a URL in the view function. It is given the name of the view that we want to pass control to and the
    # variable portion of the URL pattern that points to that view. In this case, '/polls/3/results/'. This redirected
    # URL will then call the 'results' view to display the final page.

